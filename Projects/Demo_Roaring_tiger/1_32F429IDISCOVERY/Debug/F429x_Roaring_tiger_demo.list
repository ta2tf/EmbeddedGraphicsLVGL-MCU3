
F429x_Roaring_tiger_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00070810  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08073650  08073650  0009000c  2**0
                  CONTENTS
  4 .ARM          00000008  08073650  08073650  00083650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08073658  08073658  0009000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08073658  08073658  00083658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807365c  0807365c  0008365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08073660  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0009000c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0009000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0009000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0009000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0009003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006d28  00000000  00000000  0009007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001921  00000000  00000000  00096da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006e0  00000000  00000000  000986c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004db  00000000  00000000  00098da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000238f4  00000000  00000000  00099283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009537  00000000  00000000  000bcb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d40c8  00000000  00000000  000c60ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000190c  00000000  00000000  0019a178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a2  00000000  00000000  0019ba84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002e28 	.word	0x08002e28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002e28 	.word	0x08002e28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <BSP_LCD_Init>:
void LCD_Write_Cmd(uint8_t cmd);
void LCD_SPI_Enable(void);
void LCD_Write_Data(uint8_t *buffer,uint32_t len);

void BSP_LCD_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	LCD_Pin_Init();
 80004ec:	f000 f86a 	bl	80005c4 <LCD_Pin_Init>
	LCD_SPI_Init();
 80004f0:	f000 f972 	bl	80007d8 <LCD_SPI_Init>
	LCD_SPI_Enable();
 80004f4:	f000 f95c 	bl	80007b0 <LCD_SPI_Enable>
	LCD_Reset();
 80004f8:	f000 f9ea 	bl	80008d0 <LCD_Reset>
	LCD_Config();
 80004fc:	f000 fa16 	bl	800092c <LCD_Config>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <BSP_LCD_Set_Orientation>:




void BSP_LCD_Set_Orientation(int orientation)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint8_t params[4];

	if(orientation == LANDSCAPE){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d124      	bne.n	800055c <BSP_LCD_Set_Orientation+0x58>

		LCD_Write_Cmd(ILI9341_RASET); //page address set
 8000512:	202b      	movs	r0, #43	; 0x2b
 8000514:	f000 fb6a 	bl	8000bec <LCD_Write_Cmd>
		params[0]= 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	737b      	strb	r3, [r7, #13]
		params[2]= 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	73bb      	strb	r3, [r7, #14]
		params[3]= 0xf0; //240 rows = 0xf0
 8000524:	23f0      	movs	r3, #240	; 0xf0
 8000526:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2104      	movs	r1, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fba0 	bl	8000c74 <LCD_Write_Data>

		LCD_Write_Cmd(ILI9341_CASET);
 8000534:	202a      	movs	r0, #42	; 0x2a
 8000536:	f000 fb59 	bl	8000bec <LCD_Write_Cmd>
		params[0]= 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	737b      	strb	r3, [r7, #13]
		params[2]= 0x01;
 8000542:	2301      	movs	r3, #1
 8000544:	73bb      	strb	r3, [r7, #14]
		params[3]= 0x40; //320 columns = 0x140
 8000546:	2340      	movs	r3, #64	; 0x40
 8000548:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2104      	movs	r1, #4
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fb8f 	bl	8000c74 <LCD_Write_Data>

		params[0] = MADCTL_MV | MADCTL_MY | MADCTL_BGR; /*Memory Access Control <Landscape setting>*/
 8000556:	23a8      	movs	r3, #168	; 0xa8
 8000558:	733b      	strb	r3, [r7, #12]
 800055a:	e026      	b.n	80005aa <BSP_LCD_Set_Orientation+0xa6>
	}else if(orientation == PORTRAIT){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d123      	bne.n	80005aa <BSP_LCD_Set_Orientation+0xa6>

		LCD_Write_Cmd(ILI9341_RASET); //page address set
 8000562:	202b      	movs	r0, #43	; 0x2b
 8000564:	f000 fb42 	bl	8000bec <LCD_Write_Cmd>
		params[0]= 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	737b      	strb	r3, [r7, #13]
		params[2]= 0x01;
 8000570:	2301      	movs	r3, #1
 8000572:	73bb      	strb	r3, [r7, #14]
		params[3]= 0x40; //320 rows = 0x140
 8000574:	2340      	movs	r3, #64	; 0x40
 8000576:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2104      	movs	r1, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fb78 	bl	8000c74 <LCD_Write_Data>

		LCD_Write_Cmd(ILI9341_CASET);
 8000584:	202a      	movs	r0, #42	; 0x2a
 8000586:	f000 fb31 	bl	8000bec <LCD_Write_Cmd>
		params[0]= 0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	737b      	strb	r3, [r7, #13]
		params[2]= 0x00;
 8000592:	2300      	movs	r3, #0
 8000594:	73bb      	strb	r3, [r7, #14]
		params[3]= 0xf0; //240 columns = 0xf0
 8000596:	23f0      	movs	r3, #240	; 0xf0
 8000598:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2104      	movs	r1, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fb67 	bl	8000c74 <LCD_Write_Data>

		params[0] = MADCTL_MY| MADCTL_MX| MADCTL_BGR;  /* Memory Access Control <portrait setting> */
 80005a6:	23c8      	movs	r3, #200	; 0xc8
 80005a8:	733b      	strb	r3, [r7, #12]
	}

	LCD_Write_Cmd(ILI9341_MAC);    // Memory Access Control command
 80005aa:	2036      	movs	r0, #54	; 0x36
 80005ac:	f000 fb1e 	bl	8000bec <LCD_Write_Cmd>
	LCD_Write_Data(params, 1);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2101      	movs	r1, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fb5c 	bl	8000c74 <LCD_Write_Data>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <LCD_Pin_Init>:


void LCD_Pin_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 80005ca:	4b74      	ldr	r3, [pc, #464]	; (800079c <LCD_Pin_Init+0x1d8>)
 80005cc:	617b      	str	r3, [r7, #20]
	GPIO_TypeDef *pGPIOA = GPIOA;
 80005ce:	4b74      	ldr	r3, [pc, #464]	; (80007a0 <LCD_Pin_Init+0x1dc>)
 80005d0:	613b      	str	r3, [r7, #16]
	GPIO_TypeDef *pGPIOC = GPIOC;
 80005d2:	4b74      	ldr	r3, [pc, #464]	; (80007a4 <LCD_Pin_Init+0x1e0>)
 80005d4:	60fb      	str	r3, [r7, #12]
	GPIO_TypeDef *pGPIOD = GPIOD;
 80005d6:	4b74      	ldr	r3, [pc, #464]	; (80007a8 <LCD_Pin_Init+0x1e4>)
 80005d8:	60bb      	str	r3, [r7, #8]
	GPIO_TypeDef *pGPIOF = GPIOF;
 80005da:	4b74      	ldr	r3, [pc, #464]	; (80007ac <LCD_Pin_Init+0x1e8>)
 80005dc:	607b      	str	r3, [r7, #4]

	/* Enable the clock for GPIOA,C,D,F peripherals */
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN_Pos);
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f043 0201 	orr.w	r2, r3, #1
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN_Pos);
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f043 0204 	orr.w	r2, r3, #4
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIODEN_Pos);
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f043 0208 	orr.w	r2, r3, #8
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOFEN_Pos);
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f043 0220 	orr.w	r2, r3, #32
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	631a      	str	r2, [r3, #48]	; 0x30

	//RESX
	REG_SET_VAL(pGPIOA->MODER,0x1U,0x3,(LCD_RESX_PIN * 2U)); 		/*mode*/
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOA->OTYPER,LCD_RESX_PIN); 						/*Output type*/
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOA->OSPEEDR,2U,0x3U,(LCD_RESX_PIN * 2U)); 		/*speed*/
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	609a      	str	r2, [r3, #8]


	//CSX
	REG_SET_VAL(pGPIOC->MODER,0x1U,0x3,(LCD_CSX_PIN * 2U)); 		/*mode*/
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f043 0210 	orr.w	r2, r3, #16
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOC->OTYPER,LCD_CSX_PIN); 						/*Output type*/
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f023 0204 	bic.w	r2, r3, #4
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOC->OSPEEDR,2U,0x3U,(LCD_CSX_PIN * 2U)); 		/*speed*/
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f043 0220 	orr.w	r2, r3, #32
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	609a      	str	r2, [r3, #8]

	//D/CX
	REG_SET_VAL(pGPIOD->MODER,0x1U,0x3,(LCD_DCX_PIN * 2U)); 		/*mode*/
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOD->OTYPER,LCD_DCX_PIN); 					/*Output type*/
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOD->OSPEEDR,2U,0x3U,(LCD_DCX_PIN * 2U)); 		/*speed*/
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	609a      	str	r2, [r3, #8]

	//SPI_CLK(PF7)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SCL_PIN * 2U));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SCL_PIN);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SCL_PIN * 2U));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[0],5U,0xFU,(LCD_SCL_PIN * 4U));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	621a      	str	r2, [r3, #32]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	f043 42a0 	orr.w	r2, r3, #1342177280	; 0x50000000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	621a      	str	r2, [r3, #32]

	//SPI_SDA(PF9)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SDA_PIN * 2U));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SDA_PIN);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SDA_PIN * 2U));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[1],5U,0xFU,((LCD_SDA_PIN % 8) * 4U));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	625a      	str	r2, [r3, #36]	; 0x24

	//CSX = HIGH
	REG_SET_BIT(pGPIOC->ODR,LCD_CSX_PIN);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f043 0204 	orr.w	r2, r3, #4
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	615a      	str	r2, [r3, #20]
	//RESX = HIGH
	REG_SET_BIT(pGPIOA->ODR,LCD_RESX_PIN);
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	615a      	str	r2, [r3, #20]
	//D/CX = HIGH
	REG_SET_BIT(pGPIOD->ODR,LCD_DCX_PIN);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	615a      	str	r2, [r3, #20]

}
 800078e:	bf00      	nop
 8000790:	371c      	adds	r7, #28
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021400 	.word	0x40021400

080007b0 <LCD_SPI_Enable>:


void LCD_SPI_Enable(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <LCD_SPI_Enable+0x24>)
 80007b8:	607b      	str	r3, [r7, #4]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SPE_Pos);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40015000 	.word	0x40015000

080007d8 <LCD_SPI_Init>:

void LCD_SPI_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI;
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <LCD_SPI_Init+0xc4>)
 80007e0:	607b      	str	r3, [r7, #4]
	RCC_TypeDef *pRCC = RCC;
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <LCD_SPI_Init+0xc8>)
 80007e4:	603b      	str	r3, [r7, #0]

	REG_SET_BIT(pRCC->APB2ENR,RCC_APB2ENR_SPI5EN_Pos);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	645a      	str	r2, [r3, #68]	; 0x44

	REG_SET_BIT(pSPI->CR1,SPI_CR1_MSTR_Pos); 		/*Controller mode*/
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f043 0204 	orr.w	r2, r3, #4
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIMODE_Pos);    /* BIDI mode enable*/
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos);      /* Tx only*/
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos);		/* Tx only */
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_DFF_Pos);			/* DFF = 8bits */
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSM_Pos);			/* SSM enable */
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSI_Pos);			/* SSI enable */
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_LSBFIRST_Pos);     /* Send msb first */
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
	REG_SET_VAL(pSPI->CR1,0x3U,0x7U,SPI_CR1_BR_Pos); /* SPI clck = 90MHz/16 ==> 5.625 MHz */
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f043 0218 	orr.w	r2, r3, #24
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPOL_Pos); 		 /* CPOL = 0 */
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f023 0202 	bic.w	r2, r3, #2
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPHA_Pos); 		 /* CPHA = 0 */
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f023 0201 	bic.w	r2, r3, #1
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR2,SPI_CR2_FRF_Pos);			 /* SPI Motorola frame format*/
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f023 0210 	bic.w	r2, r3, #16
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	605a      	str	r2, [r3, #4]

}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40015000 	.word	0x40015000
 80008a0:	40023800 	.word	0x40023800

080008a4 <delay_50ms>:

void delay_50ms(void){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	e002      	b.n	80008b6 <delay_50ms+0x12>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3301      	adds	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <delay_50ms+0x28>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d9f8      	bls.n	80008b0 <delay_50ms+0xc>
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	0009fff5 	.word	0x0009fff5

080008d0 <LCD_Reset>:

void LCD_Reset(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
	LCD_RESX_LOW();
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <LCD_Reset+0x54>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <LCD_Reset+0x54>)
 80008dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008e0:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	e002      	b.n	80008ee <LCD_Reset+0x1e>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <LCD_Reset+0x58>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d9f8      	bls.n	80008e8 <LCD_Reset+0x18>
	LCD_RESX_HIGH();
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <LCD_Reset+0x54>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LCD_Reset+0x54>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	e002      	b.n	800090e <LCD_Reset+0x3e>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	4a05      	ldr	r2, [pc, #20]	; (8000928 <LCD_Reset+0x58>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d9f8      	bls.n	8000908 <LCD_Reset+0x38>
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40020000 	.word	0x40020000
 8000928:	0009fff5 	.word	0x0009fff5

0800092c <LCD_Config>:


void LCD_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
	/* array to hold the command parameters*/
	uint8_t params[15] = {0};
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	f8c3 2007 	str.w	r2, [r3, #7]

	LCD_Write_Cmd(ILI9341_SWRESET);
 8000942:	2001      	movs	r0, #1
 8000944:	f000 f952 	bl	8000bec <LCD_Write_Cmd>
	LCD_Write_Cmd(ILI9341_POWERB);
 8000948:	20cf      	movs	r0, #207	; 0xcf
 800094a:	f000 f94f 	bl	8000bec <LCD_Write_Cmd>
	params[0] = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	703b      	strb	r3, [r7, #0]
	params[1] = 0xD9;
 8000952:	23d9      	movs	r3, #217	; 0xd9
 8000954:	707b      	strb	r3, [r7, #1]
	params[2] = 0x30;
 8000956:	2330      	movs	r3, #48	; 0x30
 8000958:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 800095a:	463b      	mov	r3, r7
 800095c:	2103      	movs	r1, #3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f988 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER_SEQ);
 8000964:	20ed      	movs	r0, #237	; 0xed
 8000966:	f000 f941 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x64;
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	703b      	strb	r3, [r7, #0]
	params[1]= 0x03;
 800096e:	2303      	movs	r3, #3
 8000970:	707b      	strb	r3, [r7, #1]
	params[2]= 0X12;
 8000972:	2312      	movs	r3, #18
 8000974:	70bb      	strb	r3, [r7, #2]
	params[3]= 0X81;
 8000976:	2381      	movs	r3, #129	; 0x81
 8000978:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 800097a:	463b      	mov	r3, r7
 800097c:	2104      	movs	r1, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f978 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DTCA);
 8000984:	20e8      	movs	r0, #232	; 0xe8
 8000986:	f000 f931 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x85;
 800098a:	2385      	movs	r3, #133	; 0x85
 800098c:	703b      	strb	r3, [r7, #0]
	params[1]= 0x10;
 800098e:	2310      	movs	r3, #16
 8000990:	707b      	strb	r3, [r7, #1]
	params[2]= 0x7A;
 8000992:	237a      	movs	r3, #122	; 0x7a
 8000994:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 8000996:	463b      	mov	r3, r7
 8000998:	2103      	movs	r1, #3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f96a 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWERA);
 80009a0:	20cb      	movs	r0, #203	; 0xcb
 80009a2:	f000 f923 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x39;
 80009a6:	2339      	movs	r3, #57	; 0x39
 80009a8:	703b      	strb	r3, [r7, #0]
	params[1]= 0x2C;
 80009aa:	232c      	movs	r3, #44	; 0x2c
 80009ac:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x34;
 80009b2:	2334      	movs	r3, #52	; 0x34
 80009b4:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x02;
 80009b6:	2302      	movs	r3, #2
 80009b8:	713b      	strb	r3, [r7, #4]
	LCD_Write_Data(params, 5);
 80009ba:	463b      	mov	r3, r7
 80009bc:	2105      	movs	r1, #5
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f958 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PRC);
 80009c4:	20f7      	movs	r0, #247	; 0xf7
 80009c6:	f000 f911 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x20;
 80009ca:	2320      	movs	r3, #32
 80009cc:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80009ce:	463b      	mov	r3, r7
 80009d0:	2101      	movs	r1, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f94e 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DTCB);
 80009d8:	20ea      	movs	r0, #234	; 0xea
 80009da:	f000 f907 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x00;
 80009de:	2300      	movs	r3, #0
 80009e0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 80009e2:	2300      	movs	r3, #0
 80009e4:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 80009e6:	463b      	mov	r3, r7
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f942 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER1);
 80009f0:	20c0      	movs	r0, #192	; 0xc0
 80009f2:	f000 f8fb 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x1B;
 80009f6:	231b      	movs	r3, #27
 80009f8:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80009fa:	463b      	mov	r3, r7
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f938 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER2);
 8000a04:	20c1      	movs	r0, #193	; 0xc1
 8000a06:	f000 f8f1 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x12;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2101      	movs	r1, #1
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f92e 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_VCOM1);
 8000a18:	20c5      	movs	r0, #197	; 0xc5
 8000a1a:	f000 f8e7 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x08;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	703b      	strb	r3, [r7, #0]
	params[1]= 0x26;
 8000a22:	2326      	movs	r3, #38	; 0x26
 8000a24:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a26:	463b      	mov	r3, r7
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f922 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_VCOM2);
 8000a30:	20c7      	movs	r0, #199	; 0xc7
 8000a32:	f000 f8db 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0XB7;
 8000a36:	23b7      	movs	r3, #183	; 0xb7
 8000a38:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f918 	bl	8000c74 <LCD_Write_Data>

	uint8_t m;
	m = MADCTL_MV | MADCTL_MY| MADCTL_BGR;
 8000a44:	23a8      	movs	r3, #168	; 0xa8
 8000a46:	73fb      	strb	r3, [r7, #15]

	LCD_Write_Cmd(ILI9341_MAC);    // Memory Access Control <Landscape setting>
 8000a48:	2036      	movs	r0, #54	; 0x36
 8000a4a:	f000 f8cf 	bl	8000bec <LCD_Write_Cmd>
	params[0]= m;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a52:	463b      	mov	r3, r7
 8000a54:	2101      	movs	r1, #1
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f90c 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PIXEL_FORMAT);
 8000a5c:	203a      	movs	r0, #58	; 0x3a
 8000a5e:	f000 f8c5 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x55; //select RGB565
 8000a62:	2355      	movs	r3, #85	; 0x55
 8000a64:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a66:	463b      	mov	r3, r7
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f902 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_FRMCTR1);
 8000a70:	20b1      	movs	r0, #177	; 0xb1
 8000a72:	f000 f8bb 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x00;
 8000a76:	2300      	movs	r3, #0
 8000a78:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1B;//frame rate = 70
 8000a7a:	231b      	movs	r3, #27
 8000a7c:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2102      	movs	r1, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f8f6 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DFC);    // Display Function Control
 8000a88:	20b6      	movs	r0, #182	; 0xb6
 8000a8a:	f000 f8af 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x0A;
 8000a8e:	230a      	movs	r3, #10
 8000a90:	703b      	strb	r3, [r7, #0]
	params[1]= 0xA2;
 8000a92:	23a2      	movs	r3, #162	; 0xa2
 8000a94:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a96:	463b      	mov	r3, r7
 8000a98:	2102      	movs	r1, #2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8ea 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_3GAMMA_EN);    // 3Gamma Function Disable
 8000aa0:	20f2      	movs	r0, #242	; 0xf2
 8000aa2:	f000 f8a3 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x02;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8e0 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_GAMMA);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f000 f899 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x01;
 8000aba:	2301      	movs	r3, #1
 8000abc:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f8d6 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PGAMMA);    //Set Gamma
 8000ac8:	20e0      	movs	r0, #224	; 0xe0
 8000aca:	f000 f88f 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x0F;
 8000ace:	230f      	movs	r3, #15
 8000ad0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1D;
 8000ad2:	231d      	movs	r3, #29
 8000ad4:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1A;
 8000ad6:	231a      	movs	r3, #26
 8000ad8:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x0A;
 8000ada:	230a      	movs	r3, #10
 8000adc:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0D;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	713b      	strb	r3, [r7, #4]
	params[5]= 0x07;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	717b      	strb	r3, [r7, #5]
	params[6]= 0x49;
 8000ae6:	2349      	movs	r3, #73	; 0x49
 8000ae8:	71bb      	strb	r3, [r7, #6]
	params[7]= 0X66;
 8000aea:	2366      	movs	r3, #102	; 0x66
 8000aec:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x3B;
 8000aee:	233b      	movs	r3, #59	; 0x3b
 8000af0:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8000af2:	2307      	movs	r3, #7
 8000af4:	727b      	strb	r3, [r7, #9]
	params[10]= 0x11;
 8000af6:	2311      	movs	r3, #17
 8000af8:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x01;
 8000afa:	2301      	movs	r3, #1
 8000afc:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x09;
 8000afe:	2309      	movs	r3, #9
 8000b00:	733b      	strb	r3, [r7, #12]
	params[13]= 0x05;
 8000b02:	2305      	movs	r3, #5
 8000b04:	737b      	strb	r3, [r7, #13]
	params[14]= 0x04;
 8000b06:	2304      	movs	r3, #4
 8000b08:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f8b0 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_NGAMMA);
 8000b14:	20e1      	movs	r0, #225	; 0xe1
 8000b16:	f000 f869 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x00;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	703b      	strb	r3, [r7, #0]
	params[1]= 0x18;
 8000b1e:	2318      	movs	r3, #24
 8000b20:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1D;
 8000b22:	231d      	movs	r3, #29
 8000b24:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x02;
 8000b26:	2302      	movs	r3, #2
 8000b28:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0F;
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	713b      	strb	r3, [r7, #4]
	params[5]= 0x04;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	717b      	strb	r3, [r7, #5]
	params[6]= 0x36;
 8000b32:	2336      	movs	r3, #54	; 0x36
 8000b34:	71bb      	strb	r3, [r7, #6]
	params[7]= 0x13;
 8000b36:	2313      	movs	r3, #19
 8000b38:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x4C;
 8000b3a:	234c      	movs	r3, #76	; 0x4c
 8000b3c:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	727b      	strb	r3, [r7, #9]
	params[10]= 0x13;
 8000b42:	2313      	movs	r3, #19
 8000b44:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x0F;
 8000b46:	230f      	movs	r3, #15
 8000b48:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x2E;
 8000b4a:	232e      	movs	r3, #46	; 0x2e
 8000b4c:	733b      	strb	r3, [r7, #12]
	params[13]= 0x2F;
 8000b4e:	232f      	movs	r3, #47	; 0x2f
 8000b50:	737b      	strb	r3, [r7, #13]
	params[14]= 0x05;
 8000b52:	2305      	movs	r3, #5
 8000b54:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 8000b56:	463b      	mov	r3, r7
 8000b58:	210f      	movs	r1, #15
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f88a 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_RASET); //page address set
 8000b60:	202b      	movs	r0, #43	; 0x2b
 8000b62:	f000 f843 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x00;
 8000b66:	2300      	movs	r3, #0
 8000b68:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	70bb      	strb	r3, [r7, #2]
	params[3]= 0xf0; //240 rows = 0xf0
 8000b72:	23f0      	movs	r3, #240	; 0xf0
 8000b74:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000b76:	463b      	mov	r3, r7
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f87a 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_CASET);
 8000b80:	202a      	movs	r0, #42	; 0x2a
 8000b82:	f000 f833 	bl	8000bec <LCD_Write_Cmd>
	params[0]= 0x00;
 8000b86:	2300      	movs	r3, #0
 8000b88:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	707b      	strb	r3, [r7, #1]
	params[2]= 0x01;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x40; //320 columns = 0x140
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000b96:	463b      	mov	r3, r7
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f86a 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_RGB_INTERFACE);
 8000ba0:	20b0      	movs	r0, #176	; 0xb0
 8000ba2:	f000 f823 	bl	8000bec <LCD_Write_Cmd>
	params[0] = 0xC2; //Data is fetched during falling edge of DOTCLK
 8000ba6:	23c2      	movs	r3, #194	; 0xc2
 8000ba8:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000baa:	463b      	mov	r3, r7
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f860 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_INTERFACE);
 8000bb4:	20f6      	movs	r0, #246	; 0xf6
 8000bb6:	f000 f819 	bl	8000bec <LCD_Write_Cmd>
	params[0] = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	707b      	strb	r3, [r7, #1]
	params[2] = 0x06;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2103      	movs	r1, #3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f852 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_SLEEP_OUT); //Exit Sleep
 8000bd0:	2011      	movs	r0, #17
 8000bd2:	f000 f80b 	bl	8000bec <LCD_Write_Cmd>
	delay_50ms();
 8000bd6:	f7ff fe65 	bl	80008a4 <delay_50ms>
	delay_50ms();
 8000bda:	f7ff fe63 	bl	80008a4 <delay_50ms>
	LCD_Write_Cmd(ILI9341_DISPLAY_ON); //display on
 8000bde:	2029      	movs	r0, #41	; 0x29
 8000be0:	f000 f804 	bl	8000bec <LCD_Write_Cmd>

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <LCD_Write_Cmd>:
void LCD_Write_Cmd(uint8_t cmd)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *pSPI = SPI;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <LCD_Write_Cmd+0x7c>)
 8000bf8:	60fb      	str	r3, [r7, #12]
	LCD_CSX_LOW();
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <LCD_Write_Cmd+0x80>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <LCD_Write_Cmd+0x80>)
 8000c00:	f023 0304 	bic.w	r3, r3, #4
 8000c04:	6153      	str	r3, [r2, #20]
	LCD_DCX_LOW(); //DCX = 0 , for command
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <LCD_Write_Cmd+0x84>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <LCD_Write_Cmd+0x84>)
 8000c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c10:	6153      	str	r3, [r2, #20]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000c12:	bf00      	nop
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <LCD_Write_Cmd+0x28>
	REG_WRITE(pSPI->DR,cmd);
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	60da      	str	r2, [r3, #12]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000c26:	bf00      	nop
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f9      	beq.n	8000c28 <LCD_Write_Cmd+0x3c>
	while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8000c34:	bf00      	nop
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f9      	bne.n	8000c36 <LCD_Write_Cmd+0x4a>
	LCD_DCX_HIGH();
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <LCD_Write_Cmd+0x84>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LCD_Write_Cmd+0x84>)
 8000c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c4c:	6153      	str	r3, [r2, #20]
	LCD_CSX_HIGH();
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <LCD_Write_Cmd+0x80>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <LCD_Write_Cmd+0x80>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6153      	str	r3, [r2, #20]

}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40015000 	.word	0x40015000
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <LCD_Write_Data>:

void LCD_Write_Data(uint8_t *buffer,uint32_t len)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <LCD_Write_Data+0x80>)
 8000c80:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < len ;i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e02a      	b.n	8000cde <LCD_Write_Data+0x6a>
		LCD_CSX_LOW();
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <LCD_Write_Data+0x84>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <LCD_Write_Data+0x84>)
 8000c8e:	f023 0304 	bic.w	r3, r3, #4
 8000c92:	6153      	str	r3, [r2, #20]
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000c94:	bf00      	nop
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <LCD_Write_Data+0x22>
		REG_WRITE(pSPI->DR,buffer[i]);
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60da      	str	r2, [r3, #12]
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000cb0:	bf00      	nop
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f9      	beq.n	8000cb2 <LCD_Write_Data+0x3e>
		while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8000cbe:	bf00      	nop
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f9      	bne.n	8000cc0 <LCD_Write_Data+0x4c>
		LCD_CSX_HIGH();
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <LCD_Write_Data+0x84>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <LCD_Write_Data+0x84>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i < len ;i++){
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d3d0      	bcc.n	8000c88 <LCD_Write_Data+0x14>
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	40015000 	.word	0x40015000
 8000cf8:	40020800 	.word	0x40020800

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f000 fb00 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f82e 	bl	8000d64 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LTDC_Init();
 8000d08:	f000 f89c 	bl	8000e44 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000d0c:	f7ff fbec 	bl	80004e8 <BSP_LCD_Init>
  BSP_LCD_Set_Orientation(LANDSCAPE);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fbf7 	bl	8000504 <BSP_LCD_Set_Orientation>

    /* USER CODE BEGIN 3 */

	/*Configure the frame buffer address into Layer-1 fb address register */
	/* 3 frames/sec */
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t1_320x240_map, LTDC_LAYER_1);
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <main+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480e      	ldr	r0, [pc, #56]	; (8000d58 <main+0x5c>)
 8000d1e:	f001 f815 	bl	8001d4c <HAL_LTDC_SetAddress>
	HAL_Delay(333);
 8000d22:	f240 104d 	movw	r0, #333	; 0x14d
 8000d26:	f000 fb5f 	bl	80013e8 <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t2_320x240_map, LTDC_LAYER_1);
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <main+0x60>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <main+0x5c>)
 8000d32:	f001 f80b 	bl	8001d4c <HAL_LTDC_SetAddress>
	HAL_Delay(333);
 8000d36:	f240 104d 	movw	r0, #333	; 0x14d
 8000d3a:	f000 fb55 	bl	80013e8 <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t3_320x240_map, LTDC_LAYER_1);
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <main+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <main+0x5c>)
 8000d46:	f001 f801 	bl	8001d4c <HAL_LTDC_SetAddress>
	HAL_Delay(333);
 8000d4a:	f240 104d 	movw	r0, #333	; 0x14d
 8000d4e:	f000 fb4b 	bl	80013e8 <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t1_320x240_map, LTDC_LAYER_1);
 8000d52:	e7e0      	b.n	8000d16 <main+0x1a>
 8000d54:	08002e50 	.word	0x08002e50
 8000d58:	20000028 	.word	0x20000028
 8000d5c:	08028650 	.word	0x08028650
 8000d60:	0804de50 	.word	0x0804de50

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2230      	movs	r2, #48	; 0x30
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 f82c 	bl	8002dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <SystemClock_Config+0xd8>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <SystemClock_Config+0xd8>)
 8000d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <SystemClock_Config+0xd8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SystemClock_Config+0xdc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <SystemClock_Config+0xdc>)
 8000dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <SystemClock_Config+0xdc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dd8:	23b4      	movs	r3, #180	; 0xb4
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de0:	2307      	movs	r3, #7
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 f9cd 	bl	8002188 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df4:	f000 f8a6 	bl	8000f44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000df8:	f001 f976 	bl	80020e8 <HAL_PWREx_EnableOverDrive>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e02:	f000 f89f 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2105      	movs	r1, #5
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fc27 	bl	8002678 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e30:	f000 f888 	bl	8000f44 <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3750      	adds	r7, #80	; 0x50
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40007000 	.word	0x40007000

08000e44 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2234      	movs	r2, #52	; 0x34
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 ffbd 	bl	8002dd0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e56:	4b39      	ldr	r3, [pc, #228]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e58:	4a39      	ldr	r2, [pc, #228]	; (8000f40 <MX_LTDC_Init+0xfc>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e5c:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e76:	2209      	movs	r2, #9
 8000e78:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000e7a:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000e80:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e82:	221d      	movs	r2, #29
 8000e84:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 349;
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e8e:	f240 125d 	movw	r2, #349	; 0x15d
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e96:	f240 1243 	movw	r2, #323	; 0x143
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 359;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000e9e:	f240 1267 	movw	r2, #359	; 0x167
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000ea6:	f240 1247 	movw	r2, #327	; 0x147
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ec4:	481d      	ldr	r0, [pc, #116]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000ec6:	f000 fd71 	bl	80019ac <HAL_LTDC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ed0:	f000 f838 	bl	8000f44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8000ed8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000edc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8000ee2:	23f0      	movs	r3, #240	; 0xf0
 8000ee4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000eea:	23ff      	movs	r3, #255	; 0xff
 8000eec:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
 8000f00:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
 8000f06:	23f0      	movs	r3, #240	; 0xf0
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_LTDC_Init+0xf8>)
 8000f24:	f000 fed4 	bl	8001cd0 <HAL_LTDC_ConfigLayer>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000f2e:	f000 f809 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3738      	adds	r7, #56	; 0x38
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	40016800 	.word	0x40016800

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f8e:	2007      	movs	r0, #7
 8000f90:	f000 fb1e 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09a      	sub	sp, #104	; 0x68
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	2230      	movs	r2, #48	; 0x30
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 ff05 	bl	8002dd0 <memset>
  if(hltdc->Instance==LTDC)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a89      	ldr	r2, [pc, #548]	; (80011f0 <HAL_LTDC_MspInit+0x250>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	f040 810b 	bne.w	80011e8 <HAL_LTDC_MspInit+0x248>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fd6:	2332      	movs	r3, #50	; 0x32
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fd31 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000ff4:	f7ff ffa6 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	4b7d      	ldr	r3, [pc, #500]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	4a7c      	ldr	r2, [pc, #496]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001006:	6453      	str	r3, [r2, #68]	; 0x44
 8001008:	4b7a      	ldr	r3, [pc, #488]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a75      	ldr	r2, [pc, #468]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800101e:	f043 0320 	orr.w	r3, r3, #32
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b73      	ldr	r3, [pc, #460]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a6e      	ldr	r2, [pc, #440]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b6c      	ldr	r3, [pc, #432]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a67      	ldr	r2, [pc, #412]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b65      	ldr	r3, [pc, #404]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a60      	ldr	r2, [pc, #384]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a59      	ldr	r2, [pc, #356]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b57      	ldr	r3, [pc, #348]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <HAL_LTDC_MspInit+0x254>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ce:	230e      	movs	r3, #14
 80010d0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d6:	4619      	mov	r1, r3
 80010d8:	4847      	ldr	r0, [pc, #284]	; (80011f8 <HAL_LTDC_MspInit+0x258>)
 80010da:	f000 fabb 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010de:	f641 0358 	movw	r3, #6232	; 0x1858
 80010e2:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f0:	230e      	movs	r3, #14
 80010f2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f8:	4619      	mov	r1, r3
 80010fa:	4840      	ldr	r0, [pc, #256]	; (80011fc <HAL_LTDC_MspInit+0x25c>)
 80010fc:	f000 faaa 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001100:	2303      	movs	r3, #3
 8001102:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001110:	2309      	movs	r3, #9
 8001112:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001118:	4619      	mov	r1, r3
 800111a:	4839      	ldr	r0, [pc, #228]	; (8001200 <HAL_LTDC_MspInit+0x260>)
 800111c:	f000 fa9a 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001120:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001124:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001132:	230e      	movs	r3, #14
 8001134:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800113a:	4619      	mov	r1, r3
 800113c:	4830      	ldr	r0, [pc, #192]	; (8001200 <HAL_LTDC_MspInit+0x260>)
 800113e:	f000 fa89 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001142:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001146:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001154:	230e      	movs	r3, #14
 8001156:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115c:	4619      	mov	r1, r3
 800115e:	4829      	ldr	r0, [pc, #164]	; (8001204 <HAL_LTDC_MspInit+0x264>)
 8001160:	f000 fa78 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001164:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001168:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001176:	230e      	movs	r3, #14
 8001178:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800117e:	4619      	mov	r1, r3
 8001180:	4821      	ldr	r0, [pc, #132]	; (8001208 <HAL_LTDC_MspInit+0x268>)
 8001182:	f000 fa67 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001186:	2348      	movs	r3, #72	; 0x48
 8001188:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001196:	230e      	movs	r3, #14
 8001198:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119e:	4619      	mov	r1, r3
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <HAL_LTDC_MspInit+0x26c>)
 80011a2:	f000 fa57 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011b8:	2309      	movs	r3, #9
 80011ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c0:	4619      	mov	r1, r3
 80011c2:	4810      	ldr	r0, [pc, #64]	; (8001204 <HAL_LTDC_MspInit+0x264>)
 80011c4:	f000 fa46 	bl	8001654 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2058      	movs	r0, #88	; 0x58
 80011ce:	f000 fa0a 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011d2:	2058      	movs	r0, #88	; 0x58
 80011d4:	f000 fa23 	bl	800161e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2059      	movs	r0, #89	; 0x59
 80011de:	f000 fa02 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80011e2:	2059      	movs	r0, #89	; 0x59
 80011e4:	f000 fa1b 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3768      	adds	r7, #104	; 0x68
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40016800 	.word	0x40016800
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40021400 	.word	0x40021400
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40021800 	.word	0x40021800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8a4 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <LTDC_IRQHandler+0x10>)
 800126a:	f000 fc6f 	bl	8001b4c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000028 	.word	0x20000028

08001278 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <LTDC_ER_IRQHandler+0x10>)
 800127e:	f000 fc65 	bl	8001b4c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000028 	.word	0x20000028

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012da:	f7ff ffd7 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f001 fd7f 	bl	8002de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fd0b 	bl	8000cfc <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08073660 	.word	0x08073660
  ldr r2, =_sbss
 80012f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012fc:	200000d4 	.word	0x200000d4

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 f94f 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	2000      	movs	r0, #0
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fe0a 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f967 	bl	800163a <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f92f 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	200000d0 	.word	0x200000d0

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200000d0 	.word	0x200000d0

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff8e 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff29 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff3e 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff8e 	bl	8001524 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5d 	bl	80014d0 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff31 	bl	8001494 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e177      	b.n	8001960 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8166 	bne.w	800195a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80c0 	beq.w	800195a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b66      	ldr	r3, [pc, #408]	; (8001978 <HAL_GPIO_Init+0x324>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a65      	ldr	r2, [pc, #404]	; (8001978 <HAL_GPIO_Init+0x324>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_GPIO_Init+0x324>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f6:	4a61      	ldr	r2, [pc, #388]	; (800197c <HAL_GPIO_Init+0x328>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_GPIO_Init+0x32c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d037      	beq.n	8001892 <HAL_GPIO_Init+0x23e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d031      	beq.n	800188e <HAL_GPIO_Init+0x23a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a56      	ldr	r2, [pc, #344]	; (8001988 <HAL_GPIO_Init+0x334>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d02b      	beq.n	800188a <HAL_GPIO_Init+0x236>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a55      	ldr	r2, [pc, #340]	; (800198c <HAL_GPIO_Init+0x338>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d025      	beq.n	8001886 <HAL_GPIO_Init+0x232>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_GPIO_Init+0x33c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01f      	beq.n	8001882 <HAL_GPIO_Init+0x22e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a53      	ldr	r2, [pc, #332]	; (8001994 <HAL_GPIO_Init+0x340>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_GPIO_Init+0x22a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_GPIO_Init+0x344>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x226>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_GPIO_Init+0x348>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x222>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x21e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4f      	ldr	r2, [pc, #316]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x21a>
 800186a:	2309      	movs	r3, #9
 800186c:	e012      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800186e:	230a      	movs	r3, #10
 8001870:	e010      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001872:	2308      	movs	r3, #8
 8001874:	e00e      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001876:	2307      	movs	r3, #7
 8001878:	e00c      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800187a:	2306      	movs	r3, #6
 800187c:	e00a      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800187e:	2305      	movs	r3, #5
 8001880:	e008      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001892:	2300      	movs	r3, #0
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a4:	4935      	ldr	r1, [pc, #212]	; (800197c <HAL_GPIO_Init+0x328>)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_GPIO_Init+0x354>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d6:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_GPIO_Init+0x354>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_GPIO_Init+0x354>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001900:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <HAL_GPIO_Init+0x354>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	f67f ae84 	bls.w	8001670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40013800 	.word	0x40013800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40021400 	.word	0x40021400
 8001998:	40021800 	.word	0x40021800
 800199c:	40021c00 	.word	0x40021c00
 80019a0:	40022000 	.word	0x40022000
 80019a4:	40022400 	.word	0x40022400
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0bf      	b.n	8001b3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fae4 	bl	8000fa0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80019ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6999      	ldr	r1, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001a04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6899      	ldr	r1, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_LTDC_Init+0x19c>)
 8001a20:	400b      	ands	r3, r1
 8001a22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68d9      	ldr	r1, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_LTDC_Init+0x19c>)
 8001a4e:	400b      	ands	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	041b      	lsls	r3, r3, #16
 8001a58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68d9      	ldr	r1, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6919      	ldr	r1, [r3, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_LTDC_Init+0x19c>)
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6959      	ldr	r1, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_LTDC_Init+0x19c>)
 8001aaa:	400b      	ands	r3, r1
 8001aac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6959      	ldr	r1, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0206 	orr.w	r2, r2, #6
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	f000f800 	.word	0xf000f800

08001b4c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d023      	beq.n	8001bb6 <HAL_LTDC_IRQHandler+0x6a>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01e      	beq.n	8001bb6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0204 	bic.w	r2, r2, #4
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f86f 	bl	8001c94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_LTDC_IRQHandler+0xbc>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01e      	beq.n	8001c08 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0202 	bic.w	r2, r2, #2
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2202      	movs	r2, #2
 8001be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001be8:	f043 0202 	orr.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f846 	bl	8001c94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01b      	beq.n	8001c4a <HAL_LTDC_IRQHandler+0xfe>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d016      	beq.n	8001c4a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2201      	movs	r2, #1
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f82f 	bl	8001ca8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <HAL_LTDC_IRQHandler+0x140>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d016      	beq.n	8001c8c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0208 	bic.w	r2, r2, #8
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2208      	movs	r2, #8
 8001c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f818 	bl	8001cbc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_LTDC_ConfigLayer+0x1a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e02c      	b.n	8001d44 <HAL_LTDC_ConfigLayer+0x74>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2134      	movs	r1, #52	; 0x34
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f847 	bl	8001db8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bdb0      	pop	{r4, r5, r7, pc}

08001d4c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_LTDC_SetAddress+0x1a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e024      	b.n	8001db0 <HAL_LTDC_SetAddress+0x64>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2234      	movs	r2, #52	; 0x34
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	3338      	adds	r3, #56	; 0x38
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6979      	ldr	r1, [r7, #20]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f811 	bl	8001db8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	4413      	add	r3, r2
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	01db      	lsls	r3, r3, #7
 8001de4:	4413      	add	r3, r2
 8001de6:	3384      	adds	r3, #132	; 0x84
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4611      	mov	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	01d2      	lsls	r2, r2, #7
 8001df4:	440a      	add	r2, r1
 8001df6:	3284      	adds	r2, #132	; 0x84
 8001df8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001dfc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001e0e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e10:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4619      	mov	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	01db      	lsls	r3, r3, #7
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3384      	adds	r3, #132	; 0x84
 8001e20:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001e26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e36:	4413      	add	r3, r2
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	01db      	lsls	r3, r3, #7
 8001e46:	4413      	add	r3, r2
 8001e48:	3384      	adds	r3, #132	; 0x84
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	4611      	mov	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	01d2      	lsls	r2, r2, #7
 8001e56:	440a      	add	r2, r1
 8001e58:	3284      	adds	r2, #132	; 0x84
 8001e5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001e5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e6e:	4413      	add	r3, r2
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	01db      	lsls	r3, r3, #7
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3384      	adds	r3, #132	; 0x84
 8001e80:	4619      	mov	r1, r3
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	01db      	lsls	r3, r3, #7
 8001e92:	4413      	add	r3, r2
 8001e94:	3384      	adds	r3, #132	; 0x84
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	01d2      	lsls	r2, r2, #7
 8001ea2:	440a      	add	r2, r1
 8001ea4:	3284      	adds	r2, #132	; 0x84
 8001ea6:	f023 0307 	bic.w	r3, r3, #7
 8001eaa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	01db      	lsls	r3, r3, #7
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3384      	adds	r3, #132	; 0x84
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	01db      	lsls	r3, r3, #7
 8001ee8:	4413      	add	r3, r2
 8001eea:	3384      	adds	r3, #132	; 0x84
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	01db      	lsls	r3, r3, #7
 8001ef8:	4413      	add	r3, r2
 8001efa:	3384      	adds	r3, #132	; 0x84
 8001efc:	461a      	mov	r2, r3
 8001efe:	2300      	movs	r3, #0
 8001f00:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f08:	461a      	mov	r2, r3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	01db      	lsls	r3, r3, #7
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3384      	adds	r3, #132	; 0x84
 8001f20:	4619      	mov	r1, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	01db      	lsls	r3, r3, #7
 8001f32:	4413      	add	r3, r2
 8001f34:	3384      	adds	r3, #132	; 0x84
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	01d2      	lsls	r2, r2, #7
 8001f42:	440a      	add	r2, r1
 8001f44:	3284      	adds	r2, #132	; 0x84
 8001f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	01db      	lsls	r3, r3, #7
 8001f56:	4413      	add	r3, r2
 8001f58:	3384      	adds	r3, #132	; 0x84
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	01db      	lsls	r3, r3, #7
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3384      	adds	r3, #132	; 0x84
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4611      	mov	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	01d2      	lsls	r2, r2, #7
 8001f7c:	440a      	add	r2, r1
 8001f7e:	3284      	adds	r2, #132	; 0x84
 8001f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f84:	f023 0307 	bic.w	r3, r3, #7
 8001f88:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	4608      	mov	r0, r1
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	01c9      	lsls	r1, r1, #7
 8001f9c:	4401      	add	r1, r0
 8001f9e:	3184      	adds	r1, #132	; 0x84
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	01db      	lsls	r3, r3, #7
 8001fae:	4413      	add	r3, r2
 8001fb0:	3384      	adds	r3, #132	; 0x84
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	01db      	lsls	r3, r3, #7
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3384      	adds	r3, #132	; 0x84
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	01db      	lsls	r3, r3, #7
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3384      	adds	r3, #132	; 0x84
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e01b      	b.n	8002024 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	e014      	b.n	8002024 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d00b      	beq.n	800201a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002006:	2b02      	cmp	r3, #2
 8002008:	d007      	beq.n	800201a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800200e:	2b03      	cmp	r3, #3
 8002010:	d003      	beq.n	800201a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002016:	2b07      	cmp	r3, #7
 8002018:	d102      	bne.n	8002020 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800201a:	2302      	movs	r3, #2
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e001      	b.n	8002024 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	4413      	add	r3, r2
 8002030:	3384      	adds	r3, #132	; 0x84
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	4611      	mov	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	01d2      	lsls	r2, r2, #7
 800203e:	440a      	add	r2, r1
 8002040:	3284      	adds	r2, #132	; 0x84
 8002042:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002046:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	1acb      	subs	r3, r1, r3
 800205e:	69f9      	ldr	r1, [r7, #28]
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	6809      	ldr	r1, [r1, #0]
 800206a:	4608      	mov	r0, r1
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	01c9      	lsls	r1, r1, #7
 8002070:	4401      	add	r1, r0
 8002072:	3184      	adds	r1, #132	; 0x84
 8002074:	4313      	orrs	r3, r2
 8002076:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	01db      	lsls	r3, r3, #7
 8002082:	4413      	add	r3, r2
 8002084:	3384      	adds	r3, #132	; 0x84
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4611      	mov	r1, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	01d2      	lsls	r2, r2, #7
 8002092:	440a      	add	r2, r1
 8002094:	3284      	adds	r2, #132	; 0x84
 8002096:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800209a:	f023 0307 	bic.w	r3, r3, #7
 800209e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	01db      	lsls	r3, r3, #7
 80020aa:	4413      	add	r3, r2
 80020ac:	3384      	adds	r3, #132	; 0x84
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	01db      	lsls	r3, r3, #7
 80020c0:	4413      	add	r3, r2
 80020c2:	3384      	adds	r3, #132	; 0x84
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4611      	mov	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	01d2      	lsls	r2, r2, #7
 80020d0:	440a      	add	r2, r1
 80020d2:	3284      	adds	r2, #132	; 0x84
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_PWREx_EnableOverDrive+0x90>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <HAL_PWREx_EnableOverDrive+0x90>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_PWREx_EnableOverDrive+0x90>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_PWREx_EnableOverDrive+0x94>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002114:	f7ff f95c 	bl	80013d0 <HAL_GetTick>
 8002118:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800211a:	e009      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800211c:	f7ff f958 	bl	80013d0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212a:	d901      	bls.n	8002130 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e01f      	b.n	8002170 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_PWREx_EnableOverDrive+0x98>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d1ee      	bne.n	800211c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002144:	f7ff f944 	bl	80013d0 <HAL_GetTick>
 8002148:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800214a:	e009      	b.n	8002160 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800214c:	f7ff f940 	bl	80013d0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800215a:	d901      	bls.n	8002160 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e007      	b.n	8002170 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_PWREx_EnableOverDrive+0x98>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800216c:	d1ee      	bne.n	800214c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	420e0040 	.word	0x420e0040
 8002180:	40007000 	.word	0x40007000
 8002184:	420e0044 	.word	0x420e0044

08002188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e267      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d075      	beq.n	8002292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d00c      	beq.n	80021cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b85      	ldr	r3, [pc, #532]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d112      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4b82      	ldr	r3, [pc, #520]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	4b7e      	ldr	r3, [pc, #504]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d05b      	beq.n	8002290 <HAL_RCC_OscConfig+0x108>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d157      	bne.n	8002290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e242      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d106      	bne.n	80021fc <HAL_RCC_OscConfig+0x74>
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x98>
 8002206:	4b70      	ldr	r3, [pc, #448]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6f      	ldr	r2, [pc, #444]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6c      	ldr	r2, [pc, #432]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 8002220:	4b69      	ldr	r3, [pc, #420]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a68      	ldr	r2, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b66      	ldr	r3, [pc, #408]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a65      	ldr	r2, [pc, #404]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff f8c6 	bl	80013d0 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff f8c2 	bl	80013d0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e207      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xc0>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7ff f8b2 	bl	80013d0 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff f8ae 	bl	80013d0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1f3      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0xe8>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e1c7      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4937      	ldr	r1, [pc, #220]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_RCC_OscConfig+0x244>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7ff f867 	bl	80013d0 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002306:	f7ff f863 	bl	80013d0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1a8      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4925      	ldr	r1, [pc, #148]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e015      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x244>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f846 	bl	80013d0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002348:	f7ff f842 	bl	80013d0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e187      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d036      	beq.n	80023e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_OscConfig+0x248>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff f826 	bl	80013d0 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002388:	f7ff f822 	bl	80013d0 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e167      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x200>
 80023a6:	e01b      	b.n	80023e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_OscConfig+0x248>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7ff f80f 	bl	80013d0 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	e00e      	b.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7ff f80b 	bl	80013d0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d907      	bls.n	80023d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e150      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000
 80023d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ea      	bne.n	80023b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8097 	beq.w	800251c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b7d      	ldr	r3, [pc, #500]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a7c      	ldr	r2, [pc, #496]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b7a      	ldr	r3, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b77      	ldr	r3, [pc, #476]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b74      	ldr	r3, [pc, #464]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a73      	ldr	r2, [pc, #460]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7fe ffcb 	bl	80013d0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243e:	f7fe ffc7 	bl	80013d0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e10c      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x2ea>
 8002464:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a63      	ldr	r2, [pc, #396]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x324>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x30c>
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a5e      	ldr	r2, [pc, #376]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a5b      	ldr	r2, [pc, #364]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0x324>
 8002494:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
 80024a0:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 0304 	bic.w	r3, r3, #4
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7fe ff8c 	bl	80013d0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7fe ff88 	bl	80013d0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0cb      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ee      	beq.n	80024bc <HAL_RCC_OscConfig+0x334>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe ff76 	bl	80013d0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe ff72 	bl	80013d0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0b5      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ee      	bne.n	80024e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	4a38      	ldr	r2, [pc, #224]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a1 	beq.w	8002668 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b08      	cmp	r3, #8
 8002530:	d05c      	beq.n	80025ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d141      	bne.n	80025be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_OscConfig+0x478>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe ff46 	bl	80013d0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe ff42 	bl	80013d0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e087      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	019b      	lsls	r3, r3, #6
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	491b      	ldr	r1, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x478>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe ff1b 	bl	80013d0 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe ff17 	bl	80013d0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e05c      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x416>
 80025bc:	e054      	b.n	8002668 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_OscConfig+0x478>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe ff04 	bl	80013d0 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe ff00 	bl	80013d0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e045      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x444>
 80025ea:	e03d      	b.n	8002668 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e038      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
 8002600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x4ec>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d028      	beq.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d121      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11a      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0cc      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b68      	ldr	r3, [pc, #416]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d90c      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b65      	ldr	r3, [pc, #404]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4b59      	ldr	r3, [pc, #356]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	494d      	ldr	r1, [pc, #308]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d044      	beq.n	8002798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d119      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d003      	beq.n	8002736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e067      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4934      	ldr	r1, [pc, #208]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002768:	f7fe fe32 	bl	80013d0 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7fe fe2e 	bl	80013d0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e04f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d20c      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e032      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4916      	ldr	r1, [pc, #88]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fe:	f000 f821 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002802:	4602      	mov	r2, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	490a      	ldr	r1, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fd92 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00
 8002834:	40023800 	.word	0x40023800
 8002838:	08002e40 	.word	0x08002e40
 800283c:	20000000 	.word	0x20000000
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b094      	sub	sp, #80	; 0x50
 800284a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	647b      	str	r3, [r7, #68]	; 0x44
 8002850:	2300      	movs	r3, #0
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002854:	2300      	movs	r3, #0
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800285c:	4b79      	ldr	r3, [pc, #484]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d00d      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x40>
 8002868:	2b08      	cmp	r3, #8
 800286a:	f200 80e1 	bhi.w	8002a30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x34>
 8002872:	2b04      	cmp	r3, #4
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x3a>
 8002876:	e0db      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x204>)
 800287a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800287c:	e0db      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002882:	e0d8      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002884:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800288c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289a:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	2200      	movs	r2, #0
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
 80028ae:	2300      	movs	r3, #0
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
 80028b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028b6:	4622      	mov	r2, r4
 80028b8:	462b      	mov	r3, r5
 80028ba:	f04f 0000 	mov.w	r0, #0
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	0159      	lsls	r1, r3, #5
 80028c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c8:	0150      	lsls	r0, r2, #5
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4621      	mov	r1, r4
 80028d0:	1a51      	subs	r1, r2, r1
 80028d2:	6139      	str	r1, [r7, #16]
 80028d4:	4629      	mov	r1, r5
 80028d6:	eb63 0301 	sbc.w	r3, r3, r1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e8:	4659      	mov	r1, fp
 80028ea:	018b      	lsls	r3, r1, #6
 80028ec:	4651      	mov	r1, sl
 80028ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f2:	4651      	mov	r1, sl
 80028f4:	018a      	lsls	r2, r1, #6
 80028f6:	4651      	mov	r1, sl
 80028f8:	ebb2 0801 	subs.w	r8, r2, r1
 80028fc:	4659      	mov	r1, fp
 80028fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002916:	4690      	mov	r8, r2
 8002918:	4699      	mov	r9, r3
 800291a:	4623      	mov	r3, r4
 800291c:	eb18 0303 	adds.w	r3, r8, r3
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	462b      	mov	r3, r5
 8002924:	eb49 0303 	adc.w	r3, r9, r3
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002936:	4629      	mov	r1, r5
 8002938:	024b      	lsls	r3, r1, #9
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002940:	4621      	mov	r1, r4
 8002942:	024a      	lsls	r2, r1, #9
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294a:	2200      	movs	r2, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
 800294e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002954:	f7fd fc4a 	bl	80001ec <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4613      	mov	r3, r2
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002960:	e058      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	2200      	movs	r2, #0
 800296a:	4618      	mov	r0, r3
 800296c:	4611      	mov	r1, r2
 800296e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800297c:	4642      	mov	r2, r8
 800297e:	464b      	mov	r3, r9
 8002980:	f04f 0000 	mov.w	r0, #0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	0159      	lsls	r1, r3, #5
 800298a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298e:	0150      	lsls	r0, r2, #5
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4641      	mov	r1, r8
 8002996:	ebb2 0a01 	subs.w	sl, r2, r1
 800299a:	4649      	mov	r1, r9
 800299c:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b4:	ebb2 040a 	subs.w	r4, r2, sl
 80029b8:	eb63 050b 	sbc.w	r5, r3, fp
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	00eb      	lsls	r3, r5, #3
 80029c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	18e3      	adds	r3, r4, r3
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	464b      	mov	r3, r9
 80029d8:	eb45 0303 	adc.w	r3, r5, r3
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ea:	4629      	mov	r1, r5
 80029ec:	028b      	lsls	r3, r1, #10
 80029ee:	4621      	mov	r1, r4
 80029f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f4:	4621      	mov	r1, r4
 80029f6:	028a      	lsls	r2, r1, #10
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fe:	2200      	movs	r2, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	61fa      	str	r2, [r7, #28]
 8002a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a08:	f7fd fbf0 	bl	80001ec <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4613      	mov	r3, r2
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3750      	adds	r7, #80	; 0x50
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	007a1200 	.word	0x007a1200

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d075      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a84:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a8a:	f7fe fca1 	bl	80013d0 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a92:	f7fe fc9d 	bl	80013d0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e189      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa4:	4b8a      	ldr	r3, [pc, #552]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	019a      	lsls	r2, r3, #6
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	071b      	lsls	r3, r3, #28
 8002ac8:	4981      	ldr	r1, [pc, #516]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01f      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002adc:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae2:	0f1b      	lsrs	r3, r3, #28
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	019a      	lsls	r2, r3, #6
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	431a      	orrs	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	071b      	lsls	r3, r3, #28
 8002afc:	4974      	ldr	r1, [pc, #464]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b04:	4b72      	ldr	r3, [pc, #456]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0a:	f023 021f 	bic.w	r2, r3, #31
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	496e      	ldr	r1, [pc, #440]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	019a      	lsls	r2, r3, #6
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	071b      	lsls	r3, r3, #28
 8002b3c:	4964      	ldr	r1, [pc, #400]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fc41 	bl	80013d0 <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b52:	f7fe fc3d 	bl	80013d0 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e129      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b64:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d079      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b88:	4b52      	ldr	r3, [pc, #328]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8e:	f7fe fc1f 	bl	80013d0 <HAL_GetTick>
 8002b92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b96:	f7fe fc1b 	bl	80013d0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e107      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba8:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb4:	d0ef      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	0f1b      	lsrs	r3, r3, #28
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	019a      	lsls	r2, r3, #6
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	071b      	lsls	r3, r3, #28
 8002be2:	493b      	ldr	r1, [pc, #236]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bea:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	4934      	ldr	r1, [pc, #208]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01e      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	0e1b      	lsrs	r3, r3, #24
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	019a      	lsls	r2, r3, #6
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	061b      	lsls	r3, r3, #24
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	071b      	lsls	r3, r3, #28
 8002c30:	4927      	ldr	r1, [pc, #156]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	4922      	ldr	r1, [pc, #136]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fbbc 	bl	80013d0 <HAL_GetTick>
 8002c58:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c5c:	f7fe fbb8 	bl	80013d0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0a4      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c7a:	d1ef      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 808b 	beq.w	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fb8d 	bl	80013d0 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cb8:	e010      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe fb89 	bl	80013d0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d909      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e075      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002ccc:	42470068 	.word	0x42470068
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	42470070 	.word	0x42470070
 8002cd8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cdc:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0e8      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d02f      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d028      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d1c:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d114      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fb4f 	bl	80013d0 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fb4b 	bl	80013d0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e035      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ee      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d64:	d10d      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7a:	4912      	ldr	r1, [pc, #72]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
 8002d80:	e005      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d8c:	6093      	str	r3, [r2, #8]
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9a:	490a      	ldr	r1, [pc, #40]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002db4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	42470e40 	.word	0x42470e40
 8002dcc:	424711e0 	.word	0x424711e0

08002dd0 <memset>:
 8002dd0:	4402      	add	r2, r0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d100      	bne.n	8002dda <memset+0xa>
 8002dd8:	4770      	bx	lr
 8002dda:	f803 1b01 	strb.w	r1, [r3], #1
 8002dde:	e7f9      	b.n	8002dd4 <memset+0x4>

08002de0 <__libc_init_array>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	4d0d      	ldr	r5, [pc, #52]	; (8002e18 <__libc_init_array+0x38>)
 8002de4:	4c0d      	ldr	r4, [pc, #52]	; (8002e1c <__libc_init_array+0x3c>)
 8002de6:	1b64      	subs	r4, r4, r5
 8002de8:	10a4      	asrs	r4, r4, #2
 8002dea:	2600      	movs	r6, #0
 8002dec:	42a6      	cmp	r6, r4
 8002dee:	d109      	bne.n	8002e04 <__libc_init_array+0x24>
 8002df0:	4d0b      	ldr	r5, [pc, #44]	; (8002e20 <__libc_init_array+0x40>)
 8002df2:	4c0c      	ldr	r4, [pc, #48]	; (8002e24 <__libc_init_array+0x44>)
 8002df4:	f000 f818 	bl	8002e28 <_init>
 8002df8:	1b64      	subs	r4, r4, r5
 8002dfa:	10a4      	asrs	r4, r4, #2
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	42a6      	cmp	r6, r4
 8002e00:	d105      	bne.n	8002e0e <__libc_init_array+0x2e>
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e08:	4798      	blx	r3
 8002e0a:	3601      	adds	r6, #1
 8002e0c:	e7ee      	b.n	8002dec <__libc_init_array+0xc>
 8002e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e12:	4798      	blx	r3
 8002e14:	3601      	adds	r6, #1
 8002e16:	e7f2      	b.n	8002dfe <__libc_init_array+0x1e>
 8002e18:	08073658 	.word	0x08073658
 8002e1c:	08073658 	.word	0x08073658
 8002e20:	08073658 	.word	0x08073658
 8002e24:	0807365c 	.word	0x0807365c

08002e28 <_init>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr

08002e34 <_fini>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr
